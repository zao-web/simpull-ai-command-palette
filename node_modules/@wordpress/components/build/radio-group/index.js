"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RadioGroup = void 0;
var _react = require("react");
var Ariakit = _interopRequireWildcard(require("@ariakit/react"));
var _element = require("@wordpress/element");
var _buttonGroup = _interopRequireDefault(require("../button-group"));
var _context = require("./context");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function UnforwardedRadioGroup({
  label,
  checked,
  defaultChecked,
  disabled,
  onChange,
  children,
  ...props
}, ref) {
  const radioStore = Ariakit.useRadioStore({
    value: checked,
    defaultValue: defaultChecked,
    setValue: newValue => {
      onChange?.(newValue !== null && newValue !== void 0 ? newValue : undefined);
    }
  });
  const contextValue = (0, _element.useMemo)(() => ({
    store: radioStore,
    disabled
  }), [radioStore, disabled]);
  return (0, _react.createElement)(_context.RadioGroupContext.Provider, {
    value: contextValue
  }, (0, _react.createElement)(Ariakit.RadioGroup, {
    store: radioStore,
    render: (0, _react.createElement)(_buttonGroup.default, null, children),
    "aria-label": label,
    ref: ref,
    ...props
  }));
}

/**
 * @deprecated Use `RadioControl` or `ToggleGroupControl` instead.
 */
const RadioGroup = (0, _element.forwardRef)(UnforwardedRadioGroup);
exports.RadioGroup = RadioGroup;
var _default = RadioGroup;
exports.default = _default;
//# sourceMappingURL=index.js.map