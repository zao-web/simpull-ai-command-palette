import _styled from "@emotion/styled/base";
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports
import * as Ariakit from '@ariakit/react';
import { css, keyframes } from '@emotion/react';
/**
 * Internal dependencies
 */
import { COLORS, font, rtl, CONFIG } from '../utils';
import { space } from '../utils/space';
import Icon from '../icon';
import { Truncate } from '../truncate';
const ANIMATION_PARAMS = {
  SLIDE_AMOUNT: '2px',
  DURATION: '400ms',
  EASING: 'cubic-bezier( 0.16, 1, 0.3, 1 )'
};
const CONTENT_WRAPPER_PADDING = space(1);
const ITEM_PADDING_BLOCK = space(2);
const ITEM_PADDING_INLINE = space(3);

// TODO:
// - those values are different from saved variables?
// - should bring this into the config, and make themeable
// - border color and divider color are different?
const DEFAULT_BORDER_COLOR = COLORS.gray[300];
const DIVIDER_COLOR = COLORS.gray[200];
const TOOLBAR_VARIANT_BORDER_COLOR = COLORS.gray['900'];
const DEFAULT_BOX_SHADOW = `0 0 0 ${CONFIG.borderWidth} ${DEFAULT_BORDER_COLOR}, ${CONFIG.popoverShadow}`;
const TOOLBAR_VARIANT_BOX_SHADOW = `0 0 0 ${CONFIG.borderWidth} ${TOOLBAR_VARIANT_BORDER_COLOR}`;
const GRID_TEMPLATE_COLS = 'minmax( 0, max-content ) 1fr';
const slideUpAndFade = keyframes({
  '0%': {
    opacity: 0,
    transform: `translateY(${ANIMATION_PARAMS.SLIDE_AMOUNT})`
  },
  '100%': {
    opacity: 1,
    transform: 'translateY(0)'
  }
});
const slideRightAndFade = keyframes({
  '0%': {
    opacity: 0,
    transform: `translateX(-${ANIMATION_PARAMS.SLIDE_AMOUNT})`
  },
  '100%': {
    opacity: 1,
    transform: 'translateX(0)'
  }
});
const slideDownAndFade = keyframes({
  '0%': {
    opacity: 0,
    transform: `translateY(-${ANIMATION_PARAMS.SLIDE_AMOUNT})`
  },
  '100%': {
    opacity: 1,
    transform: 'translateY(0)'
  }
});
const slideLeftAndFade = keyframes({
  '0%': {
    opacity: 0,
    transform: `translateX(${ANIMATION_PARAMS.SLIDE_AMOUNT})`
  },
  '100%': {
    opacity: 1,
    transform: 'translateX(0)'
  }
});
export const DropdownMenu = /*#__PURE__*/_styled(Ariakit.Menu, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf12"
} : {
  target: "e1kdzosf12",
  label: "DropdownMenu"
})("position:relative;z-index:1000000;display:grid;grid-template-columns:", GRID_TEMPLATE_COLS, ";grid-template-rows:auto;box-sizing:border-box;min-width:160px;max-width:320px;max-height:var( --popover-available-height );padding:", CONTENT_WRAPPER_PADDING, ";background-color:", COLORS.ui.background, ";border-radius:4px;", props => /*#__PURE__*/css("box-shadow:", props.variant === 'toolbar' ? TOOLBAR_VARIANT_BOX_SHADOW : DEFAULT_BOX_SHADOW, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:DropdownMenu;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), " overscroll-behavior:contain;overflow:auto;outline:2px solid transparent!important;animation-duration:", ANIMATION_PARAMS.DURATION, ";animation-timing-function:", ANIMATION_PARAMS.EASING, ";will-change:transform,opacity;animation-name:", slideDownAndFade, ";&[data-side='right']{animation-name:", slideLeftAndFade, ";}&[data-side='bottom']{animation-name:", slideUpAndFade, ";}&[data-side='left']{animation-name:", slideRightAndFade, ";}@media ( prefers-reduced-motion ){animation-duration:0s;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const baseItem = /*#__PURE__*/css("all:unset;position:relative;min-height:", space(10), ";box-sizing:border-box;grid-column:1/-1;display:grid;grid-template-columns:", GRID_TEMPLATE_COLS, ";align-items:center;@supports ( grid-template-columns: subgrid ){grid-template-columns:subgrid;}font-size:", font('default.fontSize'), ";font-family:inherit;font-weight:normal;line-height:20px;color:", COLORS.gray[900], ";border-radius:", CONFIG.radiusBlockUi, ";padding-block:", ITEM_PADDING_BLOCK, ";padding-inline:", ITEM_PADDING_INLINE, ";scroll-margin:", CONTENT_WRAPPER_PADDING, ";user-select:none;outline:none;&[aria-disabled='true']{color:", COLORS.ui.textDisabled, ";cursor:not-allowed;}&[data-active-item]:not( [data-focus-visible] ):not(\n\t\t\t[aria-disabled='true']\n\t\t){background-color:", COLORS.theme.accent, ";color:", COLORS.white, ";}&[data-focus-visible]{box-shadow:0 0 0 1.5px var( --wp-admin-theme-color );outline:2px solid transparent;}&:active,&[data-active]{}", DropdownMenu, ":not(:focus) &:not(:focus)[aria-expanded=\"true\"]{background-color:", COLORS.gray[100], ";color:", COLORS.gray[900], ";}svg{fill:currentColor;}" + (process.env.NODE_ENV === "production" ? "" : ";label:baseItem;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
export const DropdownMenuItem = /*#__PURE__*/_styled(Ariakit.MenuItem, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf11"
} : {
  target: "e1kdzosf11",
  label: "DropdownMenuItem"
})(baseItem, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const DropdownMenuCheckboxItem = /*#__PURE__*/_styled(Ariakit.MenuItemCheckbox, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf10"
} : {
  target: "e1kdzosf10",
  label: "DropdownMenuCheckboxItem"
})(baseItem, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const DropdownMenuRadioItem = /*#__PURE__*/_styled(Ariakit.MenuItemRadio, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf9"
} : {
  target: "e1kdzosf9",
  label: "DropdownMenuRadioItem"
})(baseItem, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZHJvcGRvd24tbWVudS12Mi9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcU5vRSIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2Ryb3Bkb3duLW1lbnUtdjIvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtaW1wb3J0c1xuaW1wb3J0ICogYXMgQXJpYWtpdCBmcm9tICdAYXJpYWtpdC9yZWFjdCc7XG5pbXBvcnQgeyBjc3MsIGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgQ09MT1JTLCBmb250LCBydGwsIENPTkZJRyB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vaWNvbic7XG5pbXBvcnQgeyBUcnVuY2F0ZSB9IGZyb20gJy4uL3RydW5jYXRlJztcbmltcG9ydCB0eXBlIHsgRHJvcGRvd25NZW51Q29udGV4dCB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBBTklNQVRJT05fUEFSQU1TID0ge1xuXHRTTElERV9BTU9VTlQ6ICcycHgnLFxuXHREVVJBVElPTjogJzQwMG1zJyxcblx0RUFTSU5HOiAnY3ViaWMtYmV6aWVyKCAwLjE2LCAxLCAwLjMsIDEgKScsXG59O1xuXG5jb25zdCBDT05URU5UX1dSQVBQRVJfUEFERElORyA9IHNwYWNlKCAxICk7XG5jb25zdCBJVEVNX1BBRERJTkdfQkxPQ0sgPSBzcGFjZSggMiApO1xuY29uc3QgSVRFTV9QQURESU5HX0lOTElORSA9IHNwYWNlKCAzICk7XG5cbi8vIFRPRE86XG4vLyAtIHRob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IGZyb20gc2F2ZWQgdmFyaWFibGVzP1xuLy8gLSBzaG91bGQgYnJpbmcgdGhpcyBpbnRvIHRoZSBjb25maWcsIGFuZCBtYWtlIHRoZW1lYWJsZVxuLy8gLSBib3JkZXIgY29sb3IgYW5kIGRpdmlkZXIgY29sb3IgYXJlIGRpZmZlcmVudD9cbmNvbnN0IERFRkFVTFRfQk9SREVSX0NPTE9SID0gQ09MT1JTLmdyYXlbIDMwMCBdO1xuY29uc3QgRElWSURFUl9DT0xPUiA9IENPTE9SUy5ncmF5WyAyMDAgXTtcbmNvbnN0IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1IgPSBDT0xPUlMuZ3JheVsgJzkwMCcgXTtcbmNvbnN0IERFRkFVTFRfQk9YX1NIQURPVyA9IGAwIDAgMCAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSAkeyBERUZBVUxUX0JPUkRFUl9DT0xPUiB9LCAkeyBDT05GSUcucG9wb3ZlclNoYWRvdyB9YDtcbmNvbnN0IFRPT0xCQVJfVkFSSUFOVF9CT1hfU0hBRE9XID0gYDAgMCAwICR7IENPTkZJRy5ib3JkZXJXaWR0aCB9ICR7IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1IgfWA7XG5cbmNvbnN0IEdSSURfVEVNUExBVEVfQ09MUyA9ICdtaW5tYXgoIDAsIG1heC1jb250ZW50ICkgMWZyJztcblxuY29uc3Qgc2xpZGVVcEFuZEZhZGUgPSBrZXlmcmFtZXMoIHtcblx0JzAlJzoge1xuXHRcdG9wYWNpdHk6IDAsXG5cdFx0dHJhbnNmb3JtOiBgdHJhbnNsYXRlWSgkeyBBTklNQVRJT05fUEFSQU1TLlNMSURFX0FNT1VOVCB9KWAsXG5cdH0sXG5cdCcxMDAlJzogeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDApJyB9LFxufSApO1xuXG5jb25zdCBzbGlkZVJpZ2h0QW5kRmFkZSA9IGtleWZyYW1lcygge1xuXHQnMCUnOiB7XG5cdFx0b3BhY2l0eTogMCxcblx0XHR0cmFuc2Zvcm06IGB0cmFuc2xhdGVYKC0keyBBTklNQVRJT05fUEFSQU1TLlNMSURFX0FNT1VOVCB9KWAsXG5cdH0sXG5cdCcxMDAlJzogeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDApJyB9LFxufSApO1xuXG5jb25zdCBzbGlkZURvd25BbmRGYWRlID0ga2V5ZnJhbWVzKCB7XG5cdCcwJSc6IHtcblx0XHRvcGFjaXR5OiAwLFxuXHRcdHRyYW5zZm9ybTogYHRyYW5zbGF0ZVkoLSR7IEFOSU1BVElPTl9QQVJBTVMuU0xJREVfQU1PVU5UIH0pYCxcblx0fSxcblx0JzEwMCUnOiB7IG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMCknIH0sXG59ICk7XG5cbmNvbnN0IHNsaWRlTGVmdEFuZEZhZGUgPSBrZXlmcmFtZXMoIHtcblx0JzAlJzoge1xuXHRcdG9wYWNpdHk6IDAsXG5cdFx0dHJhbnNmb3JtOiBgdHJhbnNsYXRlWCgkeyBBTklNQVRJT05fUEFSQU1TLlNMSURFX0FNT1VOVCB9KWAsXG5cdH0sXG5cdCcxMDAlJzogeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDApJyB9LFxufSApO1xuXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51ID0gc3R5bGVkKCBBcmlha2l0Lk1lbnUgKTxcblx0UGljazwgRHJvcGRvd25NZW51Q29udGV4dCwgJ3ZhcmlhbnQnID5cbj5gXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0LyogU2FtZSBhcyBwb3BvdmVyIGNvbXBvbmVudCAqL1xuXHQvKiBUT0RPOiBpcyB0aGVyZSBhIHdheSB0byByZWFkIHRoZSBzYXNzIHZhcmlhYmxlPyAqL1xuXHR6LWluZGV4OiAxMDAwMDAwO1xuXG5cdGRpc3BsYXk6IGdyaWQ7XG5cdGdyaWQtdGVtcGxhdGUtY29sdW1uczogJHsgR1JJRF9URU1QTEFURV9DT0xTIH07XG5cdGdyaWQtdGVtcGxhdGUtcm93czogYXV0bztcblxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRtaW4td2lkdGg6IDE2MHB4O1xuXHRtYXgtd2lkdGg6IDMyMHB4O1xuXHRtYXgtaGVpZ2h0OiB2YXIoIC0tcG9wb3Zlci1hdmFpbGFibGUtaGVpZ2h0ICk7XG5cdHBhZGRpbmc6ICR7IENPTlRFTlRfV1JBUFBFUl9QQURESU5HIH07XG5cblx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLnVpLmJhY2tncm91bmQgfTtcblx0Ym9yZGVyLXJhZGl1czogNHB4O1xuXHQkeyAoIHByb3BzICkgPT4gY3NzYFxuXHRcdGJveC1zaGFkb3c6ICR7IHByb3BzLnZhcmlhbnQgPT09ICd0b29sYmFyJ1xuXHRcdFx0PyBUT09MQkFSX1ZBUklBTlRfQk9YX1NIQURPV1xuXHRcdFx0OiBERUZBVUxUX0JPWF9TSEFET1cgfTtcblx0YCB9XG5cblx0b3ZlcnNjcm9sbC1iZWhhdmlvcjogY29udGFpbjtcblx0b3ZlcmZsb3c6IGF1dG87XG5cblx0LyogT25seSB2aXNpYmxlIGluIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlICovXG5cdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xuXG5cdC8qIEFuaW1hdGlvbiAqL1xuXHRhbmltYXRpb24tZHVyYXRpb246ICR7IEFOSU1BVElPTl9QQVJBTVMuRFVSQVRJT04gfTtcblx0YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJHsgQU5JTUFUSU9OX1BBUkFNUy5FQVNJTkcgfTtcblx0d2lsbC1jaGFuZ2U6IHRyYW5zZm9ybSwgb3BhY2l0eTtcblx0LyogRGVmYXVsdCBhbmltYXRpb24uKi9cblx0YW5pbWF0aW9uLW5hbWU6ICR7IHNsaWRlRG93bkFuZEZhZGUgfTtcblxuXHQmW2RhdGEtc2lkZT0ncmlnaHQnXSB7XG5cdFx0YW5pbWF0aW9uLW5hbWU6ICR7IHNsaWRlTGVmdEFuZEZhZGUgfTtcblx0fVxuXHQmW2RhdGEtc2lkZT0nYm90dG9tJ10ge1xuXHRcdGFuaW1hdGlvbi1uYW1lOiAkeyBzbGlkZVVwQW5kRmFkZSB9O1xuXHR9XG5cdCZbZGF0YS1zaWRlPSdsZWZ0J10ge1xuXHRcdGFuaW1hdGlvbi1uYW1lOiAkeyBzbGlkZVJpZ2h0QW5kRmFkZSB9O1xuXHR9XG5cdEBtZWRpYSAoIHByZWZlcnMtcmVkdWNlZC1tb3Rpb24gKSB7XG5cdFx0YW5pbWF0aW9uLWR1cmF0aW9uOiAwcztcblx0fVxuYDtcblxuY29uc3QgYmFzZUl0ZW0gPSBjc3NgXG5cdGFsbDogdW5zZXQ7XG5cblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRtaW4taGVpZ2h0OiAkeyBzcGFjZSggMTAgKSB9O1xuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXG5cdC8qIE9jY3VweSB0aGUgd2lkdGggb2YgYWxsIGdyaWQgY29sdW1ucyAoaWUuIGZ1bGwgd2lkdGgpICovXG5cdGdyaWQtY29sdW1uOiAxIC8gLTE7XG5cblx0ZGlzcGxheTogZ3JpZDtcblx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAkeyBHUklEX1RFTVBMQVRFX0NPTFMgfTtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblxuXHRAc3VwcG9ydHMgKCBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHN1YmdyaWQgKSB7XG5cdFx0Lypcblx0XHQgKiBEZWZpbmUgYSBncmlkIGxheW91dCB3aGljaCBpbmhlcml0cyB0aGUgc2FtZSBjb2x1bW5zIGNvbmZpZ3VyYXRpb25cblx0XHQgKiBmcm9tIHRoZSBwYXJlbnQgbGF5b3V0IChpZS4gc3ViZ3JpZCkuIFRoaXMgYWxsb3dzIHRoZSBtZW51XG5cdFx0ICogdG8gc3luY2hyb25pemUgdGhlIGluZGVudGF0aW9uIG9mIGFsbCBpdHMgaXRlbXMuXG5cdFx0ICovXG5cdFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBzdWJncmlkO1xuXHR9XG5cblx0Zm9udC1zaXplOiAkeyBmb250KCAnZGVmYXVsdC5mb250U2l6ZScgKSB9O1xuXHRmb250LWZhbWlseTogaW5oZXJpdDtcblx0Zm9udC13ZWlnaHQ6IG5vcm1hbDtcblx0bGluZS1oZWlnaHQ6IDIwcHg7XG5cblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHRib3JkZXItcmFkaXVzOiAkeyBDT05GSUcucmFkaXVzQmxvY2tVaSB9O1xuXG5cdHBhZGRpbmctYmxvY2s6ICR7IElURU1fUEFERElOR19CTE9DSyB9O1xuXHRwYWRkaW5nLWlubGluZTogJHsgSVRFTV9QQURESU5HX0lOTElORSB9O1xuXG5cdC8qXG5cdCAqIE1ha2Ugc3VyZSB0aGF0LCB3aGVuIGFuIGl0ZW0gaXMgc2Nyb2xsZWQgaW50byB2aWV3IChlZy4gd2hpbGUgdXNpbmcgdGhlXG5cdCAqIGtleWJvYXJkIHRvIG1vdmUgZm9jdXMpLCB0aGUgd2hvbGUgaXRlbSBjb21lcyBpbnRvIHZpZXdcblx0ICovXG5cdHNjcm9sbC1tYXJnaW46ICR7IENPTlRFTlRfV1JBUFBFUl9QQURESU5HIH07XG5cblx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdG91dGxpbmU6IG5vbmU7XG5cblx0JlthcmlhLWRpc2FibGVkPSd0cnVlJ10ge1xuXHRcdGNvbG9yOiAkeyBDT0xPUlMudWkudGV4dERpc2FibGVkIH07XG5cdFx0Y3Vyc29yOiBub3QtYWxsb3dlZDtcblx0fVxuXG5cdC8qIEhvdmVyICovXG5cdCZbZGF0YS1hY3RpdmUtaXRlbV06bm90KCBbZGF0YS1mb2N1cy12aXNpYmxlXSApOm5vdChcblx0XHRcdFthcmlhLWRpc2FibGVkPSd0cnVlJ11cblx0XHQpIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMudGhlbWUuYWNjZW50IH07XG5cdFx0Y29sb3I6ICR7IENPTE9SUy53aGl0ZSB9O1xuXHR9XG5cblx0LyogS2V5Ym9hcmQgZm9jdXMgKGZvY3VzLXZpc2libGUpICovXG5cdCZbZGF0YS1mb2N1cy12aXNpYmxlXSB7XG5cdFx0Ym94LXNoYWRvdzogMCAwIDAgMS41cHggdmFyKCAtLXdwLWFkbWluLXRoZW1lLWNvbG9yICk7XG5cblx0XHQvKiBPbmx5IHZpc2libGUgaW4gV2luZG93cyBIaWdoIENvbnRyYXN0IG1vZGUgKi9cblx0XHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdH1cblxuXHQvKiBBY3RpdmUgKGllLiBwcmVzc2VkLCBtb3VzZSBkb3duKSAqL1xuXHQmOmFjdGl2ZSxcblx0JltkYXRhLWFjdGl2ZV0ge1xuXHRcdC8qIFRPRE86IHNob3VsZCB0aGVyZSBiZSBhIHZpc3VhbCBhY3RpdmUgc3RhdGU/ICovXG5cdH1cblxuXHQvKiBXaGVuIHRoZSBpdGVtIGlzIHRoZSB0cmlnZ2VyIG9mIGFuIG9wZW4gc3VibWVudSAqL1xuXHQkeyBEcm9wZG93bk1lbnUgfTpub3QoOmZvY3VzKSAmOm5vdCg6Zm9jdXMpW2FyaWEtZXhwYW5kZWQ9XCJ0cnVlXCJdIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgMTAwIF0gfTtcblx0XHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbIDkwMCBdIH07XG5cdH1cblxuXHRzdmcge1xuXHRcdGZpbGw6IGN1cnJlbnRDb2xvcjtcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW0gPSBzdHlsZWQoIEFyaWFraXQuTWVudUl0ZW0gKWBcblx0JHsgYmFzZUl0ZW0gfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVDaGVja2JveEl0ZW0gPSBzdHlsZWQoIEFyaWFraXQuTWVudUl0ZW1DaGVja2JveCApYFxuXHQkeyBiYXNlSXRlbSB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudVJhZGlvSXRlbSA9IHN0eWxlZCggQXJpYWtpdC5NZW51SXRlbVJhZGlvIClgXG5cdCR7IGJhc2VJdGVtIH07XG5gO1xuXG5leHBvcnQgY29uc3QgSXRlbVByZWZpeFdyYXBwZXIgPSBzdHlsZWQuc3BhbmBcblx0LyogQWx3YXlzIG9jY3VweSB0aGUgZmlyc3QgY29sdW1uLCBldmVuIHdoZW4gYXV0by1jb2xsYXBzaW5nICovXG5cdGdyaWQtY29sdW1uOiAxO1xuXG5cdC8qXG5cdCAqIEV2ZW4gd2hlbiB0aGUgaXRlbSBpcyBub3QgY2hlY2tlZCwgb2NjdXB5IHRoZSBzYW1lIHNjcmVlbiBzcGFjZSB0byBhdm9pZFxuXHQgKiB0aGUgc3BhY2UgY29sbGFwc2lkZSB3aGVuIG5vIGl0ZW1zIGFyZSBjaGVja2VkLlxuXHQgKi9cblx0JHsgRHJvcGRvd25NZW51Q2hlY2tib3hJdGVtIH0gPiAmLFxuXHQkeyBEcm9wZG93bk1lbnVSYWRpb0l0ZW0gfSA+ICYge1xuXHRcdC8qIFNhbWUgd2lkdGggYXMgdGhlIGNoZWNrIGljb25zICovXG5cdFx0bWluLXdpZHRoOiAkeyBzcGFjZSggNiApIH07XG5cdH1cblxuXHQkeyBEcm9wZG93bk1lbnVDaGVja2JveEl0ZW0gfSA+ICYsXG5cdCR7IERyb3Bkb3duTWVudVJhZGlvSXRlbSB9ID4gJixcblx0Jjpub3QoIDplbXB0eSApIHtcblx0XHRtYXJnaW4taW5saW5lLWVuZDogJHsgc3BhY2UoIDIgKSB9O1xuXHR9XG5cblx0ZGlzcGxheTogZmxleDtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyAnNzAwJyBdIH07XG5cblx0Lypcblx0KiBXaGVuIHRoZSBwYXJlbnQgbWVudSBpdGVtIGlzIGFjdGl2ZSwgZXhjZXB0IHdoZW4gaXQncyBhIG5vbi1mb2N1c2VkL2hvdmVyZWRcblx0KiBzdWJtZW51IHRyaWdnZXIgKGluIHRoYXQgY2FzZSwgY29sb3Igc2hvdWxkIG5vdCBiZSBpbmhlcml0ZWQpXG5cdCovXG5cdFtkYXRhLWFjdGl2ZS1pdGVtXTpub3QoIFtkYXRhLWZvY3VzLXZpc2libGVdICkgPiAmLFxuXHQvKiBXaGVuIHRoZSBwYXJlbnQgbWVudSBpdGVtIGlzIGRpc2FibGVkICovXG5cdFthcmlhLWRpc2FibGVkPSd0cnVlJ10gPiAmIHtcblx0XHRjb2xvcjogaW5oZXJpdDtcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW1Db250ZW50V3JhcHBlciA9IHN0eWxlZC5kaXZgXG5cdC8qXG5cdCAqIEFsd2F5cyBvY2N1cHkgdGhlIHNlY29uZCBjb2x1bW4sIHNpbmNlIHRoZSBmaXJzdCBjb2x1bW5cblx0ICogaXMgdGFrZW4gYnkgdGhlIHByZWZpeCB3cmFwcGVyICh3aGVuIGRpc3BsYXllZCkuXG5cdCAqL1xuXHRncmlkLWNvbHVtbjogMjtcblxuXHRkaXNwbGF5OiBmbGV4O1xuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cdGdhcDogJHsgc3BhY2UoIDMgKSB9O1xuXG5cdHBvaW50ZXItZXZlbnRzOiBub25lO1xuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW1DaGlsZHJlbldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuXHRmbGV4OiAxO1xuXG5cdGRpc3BsYXk6IGlubGluZS1mbGV4O1xuXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRnYXA6ICR7IHNwYWNlKCAxICkgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBJdGVtU3VmZml4V3JhcHBlciA9IHN0eWxlZC5zcGFuYFxuXHRmbGV4OiAwIDEgZml0LWNvbnRlbnQ7XG5cdG1pbi13aWR0aDogMDtcblx0d2lkdGg6IGZpdC1jb250ZW50O1xuXG5cdGRpc3BsYXk6IGZsZXg7XG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRnYXA6ICR7IHNwYWNlKCAzICkgfTtcblxuXHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbICc3MDAnIF0gfTtcblxuXHQvKlxuXHQgKiBXaGVuIHRoZSBwYXJlbnQgbWVudSBpdGVtIGlzIGFjdGl2ZSwgZXhjZXB0IHdoZW4gaXQncyBhIG5vbi1mb2N1c2VkL2hvdmVyZWRcblx0ICogc3VibWVudSB0cmlnZ2VyIChpbiB0aGF0IGNhc2UsIGNvbG9yIHNob3VsZCBub3QgYmUgaW5oZXJpdGVkKVxuXHQgKi9cblx0W2RhdGEtYWN0aXZlLWl0ZW1dOm5vdCggW2RhdGEtZm9jdXMtdmlzaWJsZV0gKSAqOm5vdCgkeyBEcm9wZG93bk1lbnUgfSkgJixcblx0LyogV2hlbiB0aGUgcGFyZW50IG1lbnUgaXRlbSBpcyBkaXNhYmxlZCAqL1xuXHRbYXJpYS1kaXNhYmxlZD0ndHJ1ZSddICo6bm90KCR7IERyb3Bkb3duTWVudSB9KSAmIHtcblx0XHRjb2xvcjogaW5oZXJpdDtcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUdyb3VwID0gc3R5bGVkKCBBcmlha2l0Lk1lbnVHcm91cCApYFxuXHQvKiBJZ25vcmUgdGhpcyBlbGVtZW50IHdoZW4gY2FsY3VsYXRpbmcgdGhlIGxheW91dC4gVXNlZnVsIGZvciBzdWJncmlkICovXG5cdGRpc3BsYXk6IGNvbnRlbnRzO1xuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudVNlcGFyYXRvciA9IHN0eWxlZCggQXJpYWtpdC5NZW51U2VwYXJhdG9yICk8XG5cdFBpY2s8IERyb3Bkb3duTWVudUNvbnRleHQsICd2YXJpYW50JyA+XG4+YFxuXHQvKiBPY2N1cHkgdGhlIHdpZHRoIG9mIGFsbCBncmlkIGNvbHVtbnMgKGllLiBmdWxsIHdpZHRoKSAqL1xuXHRncmlkLWNvbHVtbjogMSAvIC0xO1xuXG5cdGJvcmRlcjogbm9uZTtcblx0aGVpZ2h0OiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfTtcblx0YmFja2dyb3VuZC1jb2xvcjogJHsgKCBwcm9wcyApID0+XG5cdFx0cHJvcHMudmFyaWFudCA9PT0gJ3Rvb2xiYXInXG5cdFx0XHQ/IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1Jcblx0XHRcdDogRElWSURFUl9DT0xPUiB9O1xuXHQvKiBBbGlnbiB3aXRoIG1lbnUgaXRlbXMnIGNvbnRlbnQgKi9cblx0bWFyZ2luLWJsb2NrOiAkeyBzcGFjZSggMiApIH07XG5cdG1hcmdpbi1pbmxpbmU6ICR7IElURU1fUEFERElOR19JTkxJTkUgfTtcblxuXHQvKiBPbmx5IHZpc2libGUgaW4gV2luZG93cyBIaWdoIENvbnRyYXN0IG1vZGUgKi9cblx0b3V0bGluZTogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuYDtcblxuZXhwb3J0IGNvbnN0IFN1Ym1lbnVDaGV2cm9uSWNvbiA9IHN0eWxlZCggSWNvbiApYFxuXHR3aWR0aDogJHsgc3BhY2UoIDEuNSApIH07XG5cdCR7IHJ0bChcblx0XHR7XG5cdFx0XHR0cmFuc2Zvcm06IGBzY2FsZVgoMSlgLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0dHJhbnNmb3JtOiBgc2NhbGVYKC0xKWAsXG5cdFx0fVxuXHQpIH07XG5gO1xuXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51SXRlbUxhYmVsID0gc3R5bGVkKCBUcnVuY2F0ZSApYFxuXHRmb250LXNpemU6ICR7IGZvbnQoICdkZWZhdWx0LmZvbnRTaXplJyApIH07XG5cdGxpbmUtaGVpZ2h0OiAyMHB4O1xuXHRjb2xvcjogaW5oZXJpdDtcbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVJdGVtSGVscFRleHQgPSBzdHlsZWQoIFRydW5jYXRlIClgXG5cdGZvbnQtc2l6ZTogJHsgZm9udCggJ2hlbHBUZXh0LmZvbnRTaXplJyApIH07XG5cdGxpbmUtaGVpZ2h0OiAxNnB4O1xuXHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbICc3MDAnIF0gfTtcblxuXHRbZGF0YS1hY3RpdmUtaXRlbV06bm90KCBbZGF0YS1mb2N1cy12aXNpYmxlXSApICo6bm90KCAkeyBEcm9wZG93bk1lbnUgfSApICYsXG5cdFthcmlhLWRpc2FibGVkPSd0cnVlJ10gKjpub3QoICR7IERyb3Bkb3duTWVudSB9ICkgJiB7XG5cdFx0Y29sb3I6IGluaGVyaXQ7XG5cdH1cbmA7XG4iXX0= */"));
export const ItemPrefixWrapper = _styled("span", process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf8"
} : {
  target: "e1kdzosf8",
  label: "ItemPrefixWrapper"
})("grid-column:1;", DropdownMenuCheckboxItem, ">&,", DropdownMenuRadioItem, ">&{min-width:", space(6), ";}", DropdownMenuCheckboxItem, ">&,", DropdownMenuRadioItem, ">&,&:not( :empty ){margin-inline-end:", space(2), ";}display:flex;align-items:center;justify-content:center;color:", COLORS.gray['700'], ";[data-active-item]:not( [data-focus-visible] )>&,[aria-disabled='true']>&{color:inherit;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZHJvcGRvd24tbWVudS12Mi9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeU40QyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2Ryb3Bkb3duLW1lbnUtdjIvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtaW1wb3J0c1xuaW1wb3J0ICogYXMgQXJpYWtpdCBmcm9tICdAYXJpYWtpdC9yZWFjdCc7XG5pbXBvcnQgeyBjc3MsIGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgQ09MT1JTLCBmb250LCBydGwsIENPTkZJRyB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vaWNvbic7XG5pbXBvcnQgeyBUcnVuY2F0ZSB9IGZyb20gJy4uL3RydW5jYXRlJztcbmltcG9ydCB0eXBlIHsgRHJvcGRvd25NZW51Q29udGV4dCB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBBTklNQVRJT05fUEFSQU1TID0ge1xuXHRTTElERV9BTU9VTlQ6ICcycHgnLFxuXHREVVJBVElPTjogJzQwMG1zJyxcblx0RUFTSU5HOiAnY3ViaWMtYmV6aWVyKCAwLjE2LCAxLCAwLjMsIDEgKScsXG59O1xuXG5jb25zdCBDT05URU5UX1dSQVBQRVJfUEFERElORyA9IHNwYWNlKCAxICk7XG5jb25zdCBJVEVNX1BBRERJTkdfQkxPQ0sgPSBzcGFjZSggMiApO1xuY29uc3QgSVRFTV9QQURESU5HX0lOTElORSA9IHNwYWNlKCAzICk7XG5cbi8vIFRPRE86XG4vLyAtIHRob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IGZyb20gc2F2ZWQgdmFyaWFibGVzP1xuLy8gLSBzaG91bGQgYnJpbmcgdGhpcyBpbnRvIHRoZSBjb25maWcsIGFuZCBtYWtlIHRoZW1lYWJsZVxuLy8gLSBib3JkZXIgY29sb3IgYW5kIGRpdmlkZXIgY29sb3IgYXJlIGRpZmZlcmVudD9cbmNvbnN0IERFRkFVTFRfQk9SREVSX0NPTE9SID0gQ09MT1JTLmdyYXlbIDMwMCBdO1xuY29uc3QgRElWSURFUl9DT0xPUiA9IENPTE9SUy5ncmF5WyAyMDAgXTtcbmNvbnN0IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1IgPSBDT0xPUlMuZ3JheVsgJzkwMCcgXTtcbmNvbnN0IERFRkFVTFRfQk9YX1NIQURPVyA9IGAwIDAgMCAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSAkeyBERUZBVUxUX0JPUkRFUl9DT0xPUiB9LCAkeyBDT05GSUcucG9wb3ZlclNoYWRvdyB9YDtcbmNvbnN0IFRPT0xCQVJfVkFSSUFOVF9CT1hfU0hBRE9XID0gYDAgMCAwICR7IENPTkZJRy5ib3JkZXJXaWR0aCB9ICR7IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1IgfWA7XG5cbmNvbnN0IEdSSURfVEVNUExBVEVfQ09MUyA9ICdtaW5tYXgoIDAsIG1heC1jb250ZW50ICkgMWZyJztcblxuY29uc3Qgc2xpZGVVcEFuZEZhZGUgPSBrZXlmcmFtZXMoIHtcblx0JzAlJzoge1xuXHRcdG9wYWNpdHk6IDAsXG5cdFx0dHJhbnNmb3JtOiBgdHJhbnNsYXRlWSgkeyBBTklNQVRJT05fUEFSQU1TLlNMSURFX0FNT1VOVCB9KWAsXG5cdH0sXG5cdCcxMDAlJzogeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDApJyB9LFxufSApO1xuXG5jb25zdCBzbGlkZVJpZ2h0QW5kRmFkZSA9IGtleWZyYW1lcygge1xuXHQnMCUnOiB7XG5cdFx0b3BhY2l0eTogMCxcblx0XHR0cmFuc2Zvcm06IGB0cmFuc2xhdGVYKC0keyBBTklNQVRJT05fUEFSQU1TLlNMSURFX0FNT1VOVCB9KWAsXG5cdH0sXG5cdCcxMDAlJzogeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDApJyB9LFxufSApO1xuXG5jb25zdCBzbGlkZURvd25BbmRGYWRlID0ga2V5ZnJhbWVzKCB7XG5cdCcwJSc6IHtcblx0XHRvcGFjaXR5OiAwLFxuXHRcdHRyYW5zZm9ybTogYHRyYW5zbGF0ZVkoLSR7IEFOSU1BVElPTl9QQVJBTVMuU0xJREVfQU1PVU5UIH0pYCxcblx0fSxcblx0JzEwMCUnOiB7IG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMCknIH0sXG59ICk7XG5cbmNvbnN0IHNsaWRlTGVmdEFuZEZhZGUgPSBrZXlmcmFtZXMoIHtcblx0JzAlJzoge1xuXHRcdG9wYWNpdHk6IDAsXG5cdFx0dHJhbnNmb3JtOiBgdHJhbnNsYXRlWCgkeyBBTklNQVRJT05fUEFSQU1TLlNMSURFX0FNT1VOVCB9KWAsXG5cdH0sXG5cdCcxMDAlJzogeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDApJyB9LFxufSApO1xuXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51ID0gc3R5bGVkKCBBcmlha2l0Lk1lbnUgKTxcblx0UGljazwgRHJvcGRvd25NZW51Q29udGV4dCwgJ3ZhcmlhbnQnID5cbj5gXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0LyogU2FtZSBhcyBwb3BvdmVyIGNvbXBvbmVudCAqL1xuXHQvKiBUT0RPOiBpcyB0aGVyZSBhIHdheSB0byByZWFkIHRoZSBzYXNzIHZhcmlhYmxlPyAqL1xuXHR6LWluZGV4OiAxMDAwMDAwO1xuXG5cdGRpc3BsYXk6IGdyaWQ7XG5cdGdyaWQtdGVtcGxhdGUtY29sdW1uczogJHsgR1JJRF9URU1QTEFURV9DT0xTIH07XG5cdGdyaWQtdGVtcGxhdGUtcm93czogYXV0bztcblxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRtaW4td2lkdGg6IDE2MHB4O1xuXHRtYXgtd2lkdGg6IDMyMHB4O1xuXHRtYXgtaGVpZ2h0OiB2YXIoIC0tcG9wb3Zlci1hdmFpbGFibGUtaGVpZ2h0ICk7XG5cdHBhZGRpbmc6ICR7IENPTlRFTlRfV1JBUFBFUl9QQURESU5HIH07XG5cblx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLnVpLmJhY2tncm91bmQgfTtcblx0Ym9yZGVyLXJhZGl1czogNHB4O1xuXHQkeyAoIHByb3BzICkgPT4gY3NzYFxuXHRcdGJveC1zaGFkb3c6ICR7IHByb3BzLnZhcmlhbnQgPT09ICd0b29sYmFyJ1xuXHRcdFx0PyBUT09MQkFSX1ZBUklBTlRfQk9YX1NIQURPV1xuXHRcdFx0OiBERUZBVUxUX0JPWF9TSEFET1cgfTtcblx0YCB9XG5cblx0b3ZlcnNjcm9sbC1iZWhhdmlvcjogY29udGFpbjtcblx0b3ZlcmZsb3c6IGF1dG87XG5cblx0LyogT25seSB2aXNpYmxlIGluIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlICovXG5cdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xuXG5cdC8qIEFuaW1hdGlvbiAqL1xuXHRhbmltYXRpb24tZHVyYXRpb246ICR7IEFOSU1BVElPTl9QQVJBTVMuRFVSQVRJT04gfTtcblx0YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJHsgQU5JTUFUSU9OX1BBUkFNUy5FQVNJTkcgfTtcblx0d2lsbC1jaGFuZ2U6IHRyYW5zZm9ybSwgb3BhY2l0eTtcblx0LyogRGVmYXVsdCBhbmltYXRpb24uKi9cblx0YW5pbWF0aW9uLW5hbWU6ICR7IHNsaWRlRG93bkFuZEZhZGUgfTtcblxuXHQmW2RhdGEtc2lkZT0ncmlnaHQnXSB7XG5cdFx0YW5pbWF0aW9uLW5hbWU6ICR7IHNsaWRlTGVmdEFuZEZhZGUgfTtcblx0fVxuXHQmW2RhdGEtc2lkZT0nYm90dG9tJ10ge1xuXHRcdGFuaW1hdGlvbi1uYW1lOiAkeyBzbGlkZVVwQW5kRmFkZSB9O1xuXHR9XG5cdCZbZGF0YS1zaWRlPSdsZWZ0J10ge1xuXHRcdGFuaW1hdGlvbi1uYW1lOiAkeyBzbGlkZVJpZ2h0QW5kRmFkZSB9O1xuXHR9XG5cdEBtZWRpYSAoIHByZWZlcnMtcmVkdWNlZC1tb3Rpb24gKSB7XG5cdFx0YW5pbWF0aW9uLWR1cmF0aW9uOiAwcztcblx0fVxuYDtcblxuY29uc3QgYmFzZUl0ZW0gPSBjc3NgXG5cdGFsbDogdW5zZXQ7XG5cblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRtaW4taGVpZ2h0OiAkeyBzcGFjZSggMTAgKSB9O1xuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXG5cdC8qIE9jY3VweSB0aGUgd2lkdGggb2YgYWxsIGdyaWQgY29sdW1ucyAoaWUuIGZ1bGwgd2lkdGgpICovXG5cdGdyaWQtY29sdW1uOiAxIC8gLTE7XG5cblx0ZGlzcGxheTogZ3JpZDtcblx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAkeyBHUklEX1RFTVBMQVRFX0NPTFMgfTtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblxuXHRAc3VwcG9ydHMgKCBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHN1YmdyaWQgKSB7XG5cdFx0Lypcblx0XHQgKiBEZWZpbmUgYSBncmlkIGxheW91dCB3aGljaCBpbmhlcml0cyB0aGUgc2FtZSBjb2x1bW5zIGNvbmZpZ3VyYXRpb25cblx0XHQgKiBmcm9tIHRoZSBwYXJlbnQgbGF5b3V0IChpZS4gc3ViZ3JpZCkuIFRoaXMgYWxsb3dzIHRoZSBtZW51XG5cdFx0ICogdG8gc3luY2hyb25pemUgdGhlIGluZGVudGF0aW9uIG9mIGFsbCBpdHMgaXRlbXMuXG5cdFx0ICovXG5cdFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBzdWJncmlkO1xuXHR9XG5cblx0Zm9udC1zaXplOiAkeyBmb250KCAnZGVmYXVsdC5mb250U2l6ZScgKSB9O1xuXHRmb250LWZhbWlseTogaW5oZXJpdDtcblx0Zm9udC13ZWlnaHQ6IG5vcm1hbDtcblx0bGluZS1oZWlnaHQ6IDIwcHg7XG5cblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHRib3JkZXItcmFkaXVzOiAkeyBDT05GSUcucmFkaXVzQmxvY2tVaSB9O1xuXG5cdHBhZGRpbmctYmxvY2s6ICR7IElURU1fUEFERElOR19CTE9DSyB9O1xuXHRwYWRkaW5nLWlubGluZTogJHsgSVRFTV9QQURESU5HX0lOTElORSB9O1xuXG5cdC8qXG5cdCAqIE1ha2Ugc3VyZSB0aGF0LCB3aGVuIGFuIGl0ZW0gaXMgc2Nyb2xsZWQgaW50byB2aWV3IChlZy4gd2hpbGUgdXNpbmcgdGhlXG5cdCAqIGtleWJvYXJkIHRvIG1vdmUgZm9jdXMpLCB0aGUgd2hvbGUgaXRlbSBjb21lcyBpbnRvIHZpZXdcblx0ICovXG5cdHNjcm9sbC1tYXJnaW46ICR7IENPTlRFTlRfV1JBUFBFUl9QQURESU5HIH07XG5cblx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdG91dGxpbmU6IG5vbmU7XG5cblx0JlthcmlhLWRpc2FibGVkPSd0cnVlJ10ge1xuXHRcdGNvbG9yOiAkeyBDT0xPUlMudWkudGV4dERpc2FibGVkIH07XG5cdFx0Y3Vyc29yOiBub3QtYWxsb3dlZDtcblx0fVxuXG5cdC8qIEhvdmVyICovXG5cdCZbZGF0YS1hY3RpdmUtaXRlbV06bm90KCBbZGF0YS1mb2N1cy12aXNpYmxlXSApOm5vdChcblx0XHRcdFthcmlhLWRpc2FibGVkPSd0cnVlJ11cblx0XHQpIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMudGhlbWUuYWNjZW50IH07XG5cdFx0Y29sb3I6ICR7IENPTE9SUy53aGl0ZSB9O1xuXHR9XG5cblx0LyogS2V5Ym9hcmQgZm9jdXMgKGZvY3VzLXZpc2libGUpICovXG5cdCZbZGF0YS1mb2N1cy12aXNpYmxlXSB7XG5cdFx0Ym94LXNoYWRvdzogMCAwIDAgMS41cHggdmFyKCAtLXdwLWFkbWluLXRoZW1lLWNvbG9yICk7XG5cblx0XHQvKiBPbmx5IHZpc2libGUgaW4gV2luZG93cyBIaWdoIENvbnRyYXN0IG1vZGUgKi9cblx0XHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdH1cblxuXHQvKiBBY3RpdmUgKGllLiBwcmVzc2VkLCBtb3VzZSBkb3duKSAqL1xuXHQmOmFjdGl2ZSxcblx0JltkYXRhLWFjdGl2ZV0ge1xuXHRcdC8qIFRPRE86IHNob3VsZCB0aGVyZSBiZSBhIHZpc3VhbCBhY3RpdmUgc3RhdGU/ICovXG5cdH1cblxuXHQvKiBXaGVuIHRoZSBpdGVtIGlzIHRoZSB0cmlnZ2VyIG9mIGFuIG9wZW4gc3VibWVudSAqL1xuXHQkeyBEcm9wZG93bk1lbnUgfTpub3QoOmZvY3VzKSAmOm5vdCg6Zm9jdXMpW2FyaWEtZXhwYW5kZWQ9XCJ0cnVlXCJdIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgMTAwIF0gfTtcblx0XHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbIDkwMCBdIH07XG5cdH1cblxuXHRzdmcge1xuXHRcdGZpbGw6IGN1cnJlbnRDb2xvcjtcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW0gPSBzdHlsZWQoIEFyaWFraXQuTWVudUl0ZW0gKWBcblx0JHsgYmFzZUl0ZW0gfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVDaGVja2JveEl0ZW0gPSBzdHlsZWQoIEFyaWFraXQuTWVudUl0ZW1DaGVja2JveCApYFxuXHQkeyBiYXNlSXRlbSB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudVJhZGlvSXRlbSA9IHN0eWxlZCggQXJpYWtpdC5NZW51SXRlbVJhZGlvIClgXG5cdCR7IGJhc2VJdGVtIH07XG5gO1xuXG5leHBvcnQgY29uc3QgSXRlbVByZWZpeFdyYXBwZXIgPSBzdHlsZWQuc3BhbmBcblx0LyogQWx3YXlzIG9jY3VweSB0aGUgZmlyc3QgY29sdW1uLCBldmVuIHdoZW4gYXV0by1jb2xsYXBzaW5nICovXG5cdGdyaWQtY29sdW1uOiAxO1xuXG5cdC8qXG5cdCAqIEV2ZW4gd2hlbiB0aGUgaXRlbSBpcyBub3QgY2hlY2tlZCwgb2NjdXB5IHRoZSBzYW1lIHNjcmVlbiBzcGFjZSB0byBhdm9pZFxuXHQgKiB0aGUgc3BhY2UgY29sbGFwc2lkZSB3aGVuIG5vIGl0ZW1zIGFyZSBjaGVja2VkLlxuXHQgKi9cblx0JHsgRHJvcGRvd25NZW51Q2hlY2tib3hJdGVtIH0gPiAmLFxuXHQkeyBEcm9wZG93bk1lbnVSYWRpb0l0ZW0gfSA+ICYge1xuXHRcdC8qIFNhbWUgd2lkdGggYXMgdGhlIGNoZWNrIGljb25zICovXG5cdFx0bWluLXdpZHRoOiAkeyBzcGFjZSggNiApIH07XG5cdH1cblxuXHQkeyBEcm9wZG93bk1lbnVDaGVja2JveEl0ZW0gfSA+ICYsXG5cdCR7IERyb3Bkb3duTWVudVJhZGlvSXRlbSB9ID4gJixcblx0Jjpub3QoIDplbXB0eSApIHtcblx0XHRtYXJnaW4taW5saW5lLWVuZDogJHsgc3BhY2UoIDIgKSB9O1xuXHR9XG5cblx0ZGlzcGxheTogZmxleDtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyAnNzAwJyBdIH07XG5cblx0Lypcblx0KiBXaGVuIHRoZSBwYXJlbnQgbWVudSBpdGVtIGlzIGFjdGl2ZSwgZXhjZXB0IHdoZW4gaXQncyBhIG5vbi1mb2N1c2VkL2hvdmVyZWRcblx0KiBzdWJtZW51IHRyaWdnZXIgKGluIHRoYXQgY2FzZSwgY29sb3Igc2hvdWxkIG5vdCBiZSBpbmhlcml0ZWQpXG5cdCovXG5cdFtkYXRhLWFjdGl2ZS1pdGVtXTpub3QoIFtkYXRhLWZvY3VzLXZpc2libGVdICkgPiAmLFxuXHQvKiBXaGVuIHRoZSBwYXJlbnQgbWVudSBpdGVtIGlzIGRpc2FibGVkICovXG5cdFthcmlhLWRpc2FibGVkPSd0cnVlJ10gPiAmIHtcblx0XHRjb2xvcjogaW5oZXJpdDtcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW1Db250ZW50V3JhcHBlciA9IHN0eWxlZC5kaXZgXG5cdC8qXG5cdCAqIEFsd2F5cyBvY2N1cHkgdGhlIHNlY29uZCBjb2x1bW4sIHNpbmNlIHRoZSBmaXJzdCBjb2x1bW5cblx0ICogaXMgdGFrZW4gYnkgdGhlIHByZWZpeCB3cmFwcGVyICh3aGVuIGRpc3BsYXllZCkuXG5cdCAqL1xuXHRncmlkLWNvbHVtbjogMjtcblxuXHRkaXNwbGF5OiBmbGV4O1xuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cdGdhcDogJHsgc3BhY2UoIDMgKSB9O1xuXG5cdHBvaW50ZXItZXZlbnRzOiBub25lO1xuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW1DaGlsZHJlbldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuXHRmbGV4OiAxO1xuXG5cdGRpc3BsYXk6IGlubGluZS1mbGV4O1xuXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRnYXA6ICR7IHNwYWNlKCAxICkgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBJdGVtU3VmZml4V3JhcHBlciA9IHN0eWxlZC5zcGFuYFxuXHRmbGV4OiAwIDEgZml0LWNvbnRlbnQ7XG5cdG1pbi13aWR0aDogMDtcblx0d2lkdGg6IGZpdC1jb250ZW50O1xuXG5cdGRpc3BsYXk6IGZsZXg7XG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRnYXA6ICR7IHNwYWNlKCAzICkgfTtcblxuXHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbICc3MDAnIF0gfTtcblxuXHQvKlxuXHQgKiBXaGVuIHRoZSBwYXJlbnQgbWVudSBpdGVtIGlzIGFjdGl2ZSwgZXhjZXB0IHdoZW4gaXQncyBhIG5vbi1mb2N1c2VkL2hvdmVyZWRcblx0ICogc3VibWVudSB0cmlnZ2VyIChpbiB0aGF0IGNhc2UsIGNvbG9yIHNob3VsZCBub3QgYmUgaW5oZXJpdGVkKVxuXHQgKi9cblx0W2RhdGEtYWN0aXZlLWl0ZW1dOm5vdCggW2RhdGEtZm9jdXMtdmlzaWJsZV0gKSAqOm5vdCgkeyBEcm9wZG93bk1lbnUgfSkgJixcblx0LyogV2hlbiB0aGUgcGFyZW50IG1lbnUgaXRlbSBpcyBkaXNhYmxlZCAqL1xuXHRbYXJpYS1kaXNhYmxlZD0ndHJ1ZSddICo6bm90KCR7IERyb3Bkb3duTWVudSB9KSAmIHtcblx0XHRjb2xvcjogaW5oZXJpdDtcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUdyb3VwID0gc3R5bGVkKCBBcmlha2l0Lk1lbnVHcm91cCApYFxuXHQvKiBJZ25vcmUgdGhpcyBlbGVtZW50IHdoZW4gY2FsY3VsYXRpbmcgdGhlIGxheW91dC4gVXNlZnVsIGZvciBzdWJncmlkICovXG5cdGRpc3BsYXk6IGNvbnRlbnRzO1xuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudVNlcGFyYXRvciA9IHN0eWxlZCggQXJpYWtpdC5NZW51U2VwYXJhdG9yICk8XG5cdFBpY2s8IERyb3Bkb3duTWVudUNvbnRleHQsICd2YXJpYW50JyA+XG4+YFxuXHQvKiBPY2N1cHkgdGhlIHdpZHRoIG9mIGFsbCBncmlkIGNvbHVtbnMgKGllLiBmdWxsIHdpZHRoKSAqL1xuXHRncmlkLWNvbHVtbjogMSAvIC0xO1xuXG5cdGJvcmRlcjogbm9uZTtcblx0aGVpZ2h0OiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfTtcblx0YmFja2dyb3VuZC1jb2xvcjogJHsgKCBwcm9wcyApID0+XG5cdFx0cHJvcHMudmFyaWFudCA9PT0gJ3Rvb2xiYXInXG5cdFx0XHQ/IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1Jcblx0XHRcdDogRElWSURFUl9DT0xPUiB9O1xuXHQvKiBBbGlnbiB3aXRoIG1lbnUgaXRlbXMnIGNvbnRlbnQgKi9cblx0bWFyZ2luLWJsb2NrOiAkeyBzcGFjZSggMiApIH07XG5cdG1hcmdpbi1pbmxpbmU6ICR7IElURU1fUEFERElOR19JTkxJTkUgfTtcblxuXHQvKiBPbmx5IHZpc2libGUgaW4gV2luZG93cyBIaWdoIENvbnRyYXN0IG1vZGUgKi9cblx0b3V0bGluZTogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuYDtcblxuZXhwb3J0IGNvbnN0IFN1Ym1lbnVDaGV2cm9uSWNvbiA9IHN0eWxlZCggSWNvbiApYFxuXHR3aWR0aDogJHsgc3BhY2UoIDEuNSApIH07XG5cdCR7IHJ0bChcblx0XHR7XG5cdFx0XHR0cmFuc2Zvcm06IGBzY2FsZVgoMSlgLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0dHJhbnNmb3JtOiBgc2NhbGVYKC0xKWAsXG5cdFx0fVxuXHQpIH07XG5gO1xuXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51SXRlbUxhYmVsID0gc3R5bGVkKCBUcnVuY2F0ZSApYFxuXHRmb250LXNpemU6ICR7IGZvbnQoICdkZWZhdWx0LmZvbnRTaXplJyApIH07XG5cdGxpbmUtaGVpZ2h0OiAyMHB4O1xuXHRjb2xvcjogaW5oZXJpdDtcbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVJdGVtSGVscFRleHQgPSBzdHlsZWQoIFRydW5jYXRlIClgXG5cdGZvbnQtc2l6ZTogJHsgZm9udCggJ2hlbHBUZXh0LmZvbnRTaXplJyApIH07XG5cdGxpbmUtaGVpZ2h0OiAxNnB4O1xuXHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbICc3MDAnIF0gfTtcblxuXHRbZGF0YS1hY3RpdmUtaXRlbV06bm90KCBbZGF0YS1mb2N1cy12aXNpYmxlXSApICo6bm90KCAkeyBEcm9wZG93bk1lbnUgfSApICYsXG5cdFthcmlhLWRpc2FibGVkPSd0cnVlJ10gKjpub3QoICR7IERyb3Bkb3duTWVudSB9ICkgJiB7XG5cdFx0Y29sb3I6IGluaGVyaXQ7XG5cdH1cbmA7XG4iXX0= */"));
export const DropdownMenuItemContentWrapper = _styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf7"
} : {
  target: "e1kdzosf7",
  label: "DropdownMenuItemContentWrapper"
})("grid-column:2;display:flex;align-items:center;justify-content:space-between;gap:", space(3), ";pointer-events:none;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const DropdownMenuItemChildrenWrapper = _styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf6"
} : {
  target: "e1kdzosf6",
  label: "DropdownMenuItemChildrenWrapper"
})("flex:1;display:inline-flex;flex-direction:column;gap:", space(1), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const ItemSuffixWrapper = _styled("span", process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf5"
} : {
  target: "e1kdzosf5",
  label: "ItemSuffixWrapper"
})("flex:0 1 fit-content;min-width:0;width:fit-content;display:flex;align-items:center;justify-content:center;gap:", space(3), ";color:", COLORS.gray['700'], ";[data-active-item]:not( [data-focus-visible] ) *:not(", DropdownMenu, ") &,[aria-disabled='true'] *:not(", DropdownMenu, ") &{color:inherit;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const DropdownMenuGroup = /*#__PURE__*/_styled(Ariakit.MenuGroup, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf4"
} : {
  target: "e1kdzosf4",
  label: "DropdownMenuGroup"
})(process.env.NODE_ENV === "production" ? {
  name: "49aokf",
  styles: "display:contents"
} : {
  name: "49aokf",
  styles: "display:contents",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
export const DropdownMenuSeparator = /*#__PURE__*/_styled(Ariakit.MenuSeparator, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf3"
} : {
  target: "e1kdzosf3",
  label: "DropdownMenuSeparator"
})("grid-column:1/-1;border:none;height:", CONFIG.borderWidth, ";background-color:", props => props.variant === 'toolbar' ? TOOLBAR_VARIANT_BORDER_COLOR : DIVIDER_COLOR, ";margin-block:", space(2), ";margin-inline:", ITEM_PADDING_INLINE, ";outline:2px solid transparent;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const SubmenuChevronIcon = /*#__PURE__*/_styled(Icon, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf2"
} : {
  target: "e1kdzosf2",
  label: "SubmenuChevronIcon"
})("width:", space(1.5), ";", rtl({
  transform: `scaleX(1)`
}, {
  transform: `scaleX(-1)`
}), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const DropdownMenuItemLabel = /*#__PURE__*/_styled(Truncate, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf1"
} : {
  target: "e1kdzosf1",
  label: "DropdownMenuItemLabel"
})("font-size:", font('default.fontSize'), ";line-height:20px;color:inherit;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZHJvcGRvd24tbWVudS12Mi9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaVZ1RCIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2Ryb3Bkb3duLW1lbnUtdjIvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtaW1wb3J0c1xuaW1wb3J0ICogYXMgQXJpYWtpdCBmcm9tICdAYXJpYWtpdC9yZWFjdCc7XG5pbXBvcnQgeyBjc3MsIGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgQ09MT1JTLCBmb250LCBydGwsIENPTkZJRyB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vaWNvbic7XG5pbXBvcnQgeyBUcnVuY2F0ZSB9IGZyb20gJy4uL3RydW5jYXRlJztcbmltcG9ydCB0eXBlIHsgRHJvcGRvd25NZW51Q29udGV4dCB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBBTklNQVRJT05fUEFSQU1TID0ge1xuXHRTTElERV9BTU9VTlQ6ICcycHgnLFxuXHREVVJBVElPTjogJzQwMG1zJyxcblx0RUFTSU5HOiAnY3ViaWMtYmV6aWVyKCAwLjE2LCAxLCAwLjMsIDEgKScsXG59O1xuXG5jb25zdCBDT05URU5UX1dSQVBQRVJfUEFERElORyA9IHNwYWNlKCAxICk7XG5jb25zdCBJVEVNX1BBRERJTkdfQkxPQ0sgPSBzcGFjZSggMiApO1xuY29uc3QgSVRFTV9QQURESU5HX0lOTElORSA9IHNwYWNlKCAzICk7XG5cbi8vIFRPRE86XG4vLyAtIHRob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IGZyb20gc2F2ZWQgdmFyaWFibGVzP1xuLy8gLSBzaG91bGQgYnJpbmcgdGhpcyBpbnRvIHRoZSBjb25maWcsIGFuZCBtYWtlIHRoZW1lYWJsZVxuLy8gLSBib3JkZXIgY29sb3IgYW5kIGRpdmlkZXIgY29sb3IgYXJlIGRpZmZlcmVudD9cbmNvbnN0IERFRkFVTFRfQk9SREVSX0NPTE9SID0gQ09MT1JTLmdyYXlbIDMwMCBdO1xuY29uc3QgRElWSURFUl9DT0xPUiA9IENPTE9SUy5ncmF5WyAyMDAgXTtcbmNvbnN0IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1IgPSBDT0xPUlMuZ3JheVsgJzkwMCcgXTtcbmNvbnN0IERFRkFVTFRfQk9YX1NIQURPVyA9IGAwIDAgMCAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSAkeyBERUZBVUxUX0JPUkRFUl9DT0xPUiB9LCAkeyBDT05GSUcucG9wb3ZlclNoYWRvdyB9YDtcbmNvbnN0IFRPT0xCQVJfVkFSSUFOVF9CT1hfU0hBRE9XID0gYDAgMCAwICR7IENPTkZJRy5ib3JkZXJXaWR0aCB9ICR7IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1IgfWA7XG5cbmNvbnN0IEdSSURfVEVNUExBVEVfQ09MUyA9ICdtaW5tYXgoIDAsIG1heC1jb250ZW50ICkgMWZyJztcblxuY29uc3Qgc2xpZGVVcEFuZEZhZGUgPSBrZXlmcmFtZXMoIHtcblx0JzAlJzoge1xuXHRcdG9wYWNpdHk6IDAsXG5cdFx0dHJhbnNmb3JtOiBgdHJhbnNsYXRlWSgkeyBBTklNQVRJT05fUEFSQU1TLlNMSURFX0FNT1VOVCB9KWAsXG5cdH0sXG5cdCcxMDAlJzogeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDApJyB9LFxufSApO1xuXG5jb25zdCBzbGlkZVJpZ2h0QW5kRmFkZSA9IGtleWZyYW1lcygge1xuXHQnMCUnOiB7XG5cdFx0b3BhY2l0eTogMCxcblx0XHR0cmFuc2Zvcm06IGB0cmFuc2xhdGVYKC0keyBBTklNQVRJT05fUEFSQU1TLlNMSURFX0FNT1VOVCB9KWAsXG5cdH0sXG5cdCcxMDAlJzogeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDApJyB9LFxufSApO1xuXG5jb25zdCBzbGlkZURvd25BbmRGYWRlID0ga2V5ZnJhbWVzKCB7XG5cdCcwJSc6IHtcblx0XHRvcGFjaXR5OiAwLFxuXHRcdHRyYW5zZm9ybTogYHRyYW5zbGF0ZVkoLSR7IEFOSU1BVElPTl9QQVJBTVMuU0xJREVfQU1PVU5UIH0pYCxcblx0fSxcblx0JzEwMCUnOiB7IG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMCknIH0sXG59ICk7XG5cbmNvbnN0IHNsaWRlTGVmdEFuZEZhZGUgPSBrZXlmcmFtZXMoIHtcblx0JzAlJzoge1xuXHRcdG9wYWNpdHk6IDAsXG5cdFx0dHJhbnNmb3JtOiBgdHJhbnNsYXRlWCgkeyBBTklNQVRJT05fUEFSQU1TLlNMSURFX0FNT1VOVCB9KWAsXG5cdH0sXG5cdCcxMDAlJzogeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDApJyB9LFxufSApO1xuXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51ID0gc3R5bGVkKCBBcmlha2l0Lk1lbnUgKTxcblx0UGljazwgRHJvcGRvd25NZW51Q29udGV4dCwgJ3ZhcmlhbnQnID5cbj5gXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0LyogU2FtZSBhcyBwb3BvdmVyIGNvbXBvbmVudCAqL1xuXHQvKiBUT0RPOiBpcyB0aGVyZSBhIHdheSB0byByZWFkIHRoZSBzYXNzIHZhcmlhYmxlPyAqL1xuXHR6LWluZGV4OiAxMDAwMDAwO1xuXG5cdGRpc3BsYXk6IGdyaWQ7XG5cdGdyaWQtdGVtcGxhdGUtY29sdW1uczogJHsgR1JJRF9URU1QTEFURV9DT0xTIH07XG5cdGdyaWQtdGVtcGxhdGUtcm93czogYXV0bztcblxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRtaW4td2lkdGg6IDE2MHB4O1xuXHRtYXgtd2lkdGg6IDMyMHB4O1xuXHRtYXgtaGVpZ2h0OiB2YXIoIC0tcG9wb3Zlci1hdmFpbGFibGUtaGVpZ2h0ICk7XG5cdHBhZGRpbmc6ICR7IENPTlRFTlRfV1JBUFBFUl9QQURESU5HIH07XG5cblx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLnVpLmJhY2tncm91bmQgfTtcblx0Ym9yZGVyLXJhZGl1czogNHB4O1xuXHQkeyAoIHByb3BzICkgPT4gY3NzYFxuXHRcdGJveC1zaGFkb3c6ICR7IHByb3BzLnZhcmlhbnQgPT09ICd0b29sYmFyJ1xuXHRcdFx0PyBUT09MQkFSX1ZBUklBTlRfQk9YX1NIQURPV1xuXHRcdFx0OiBERUZBVUxUX0JPWF9TSEFET1cgfTtcblx0YCB9XG5cblx0b3ZlcnNjcm9sbC1iZWhhdmlvcjogY29udGFpbjtcblx0b3ZlcmZsb3c6IGF1dG87XG5cblx0LyogT25seSB2aXNpYmxlIGluIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlICovXG5cdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xuXG5cdC8qIEFuaW1hdGlvbiAqL1xuXHRhbmltYXRpb24tZHVyYXRpb246ICR7IEFOSU1BVElPTl9QQVJBTVMuRFVSQVRJT04gfTtcblx0YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJHsgQU5JTUFUSU9OX1BBUkFNUy5FQVNJTkcgfTtcblx0d2lsbC1jaGFuZ2U6IHRyYW5zZm9ybSwgb3BhY2l0eTtcblx0LyogRGVmYXVsdCBhbmltYXRpb24uKi9cblx0YW5pbWF0aW9uLW5hbWU6ICR7IHNsaWRlRG93bkFuZEZhZGUgfTtcblxuXHQmW2RhdGEtc2lkZT0ncmlnaHQnXSB7XG5cdFx0YW5pbWF0aW9uLW5hbWU6ICR7IHNsaWRlTGVmdEFuZEZhZGUgfTtcblx0fVxuXHQmW2RhdGEtc2lkZT0nYm90dG9tJ10ge1xuXHRcdGFuaW1hdGlvbi1uYW1lOiAkeyBzbGlkZVVwQW5kRmFkZSB9O1xuXHR9XG5cdCZbZGF0YS1zaWRlPSdsZWZ0J10ge1xuXHRcdGFuaW1hdGlvbi1uYW1lOiAkeyBzbGlkZVJpZ2h0QW5kRmFkZSB9O1xuXHR9XG5cdEBtZWRpYSAoIHByZWZlcnMtcmVkdWNlZC1tb3Rpb24gKSB7XG5cdFx0YW5pbWF0aW9uLWR1cmF0aW9uOiAwcztcblx0fVxuYDtcblxuY29uc3QgYmFzZUl0ZW0gPSBjc3NgXG5cdGFsbDogdW5zZXQ7XG5cblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRtaW4taGVpZ2h0OiAkeyBzcGFjZSggMTAgKSB9O1xuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXG5cdC8qIE9jY3VweSB0aGUgd2lkdGggb2YgYWxsIGdyaWQgY29sdW1ucyAoaWUuIGZ1bGwgd2lkdGgpICovXG5cdGdyaWQtY29sdW1uOiAxIC8gLTE7XG5cblx0ZGlzcGxheTogZ3JpZDtcblx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAkeyBHUklEX1RFTVBMQVRFX0NPTFMgfTtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblxuXHRAc3VwcG9ydHMgKCBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHN1YmdyaWQgKSB7XG5cdFx0Lypcblx0XHQgKiBEZWZpbmUgYSBncmlkIGxheW91dCB3aGljaCBpbmhlcml0cyB0aGUgc2FtZSBjb2x1bW5zIGNvbmZpZ3VyYXRpb25cblx0XHQgKiBmcm9tIHRoZSBwYXJlbnQgbGF5b3V0IChpZS4gc3ViZ3JpZCkuIFRoaXMgYWxsb3dzIHRoZSBtZW51XG5cdFx0ICogdG8gc3luY2hyb25pemUgdGhlIGluZGVudGF0aW9uIG9mIGFsbCBpdHMgaXRlbXMuXG5cdFx0ICovXG5cdFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBzdWJncmlkO1xuXHR9XG5cblx0Zm9udC1zaXplOiAkeyBmb250KCAnZGVmYXVsdC5mb250U2l6ZScgKSB9O1xuXHRmb250LWZhbWlseTogaW5oZXJpdDtcblx0Zm9udC13ZWlnaHQ6IG5vcm1hbDtcblx0bGluZS1oZWlnaHQ6IDIwcHg7XG5cblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHRib3JkZXItcmFkaXVzOiAkeyBDT05GSUcucmFkaXVzQmxvY2tVaSB9O1xuXG5cdHBhZGRpbmctYmxvY2s6ICR7IElURU1fUEFERElOR19CTE9DSyB9O1xuXHRwYWRkaW5nLWlubGluZTogJHsgSVRFTV9QQURESU5HX0lOTElORSB9O1xuXG5cdC8qXG5cdCAqIE1ha2Ugc3VyZSB0aGF0LCB3aGVuIGFuIGl0ZW0gaXMgc2Nyb2xsZWQgaW50byB2aWV3IChlZy4gd2hpbGUgdXNpbmcgdGhlXG5cdCAqIGtleWJvYXJkIHRvIG1vdmUgZm9jdXMpLCB0aGUgd2hvbGUgaXRlbSBjb21lcyBpbnRvIHZpZXdcblx0ICovXG5cdHNjcm9sbC1tYXJnaW46ICR7IENPTlRFTlRfV1JBUFBFUl9QQURESU5HIH07XG5cblx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdG91dGxpbmU6IG5vbmU7XG5cblx0JlthcmlhLWRpc2FibGVkPSd0cnVlJ10ge1xuXHRcdGNvbG9yOiAkeyBDT0xPUlMudWkudGV4dERpc2FibGVkIH07XG5cdFx0Y3Vyc29yOiBub3QtYWxsb3dlZDtcblx0fVxuXG5cdC8qIEhvdmVyICovXG5cdCZbZGF0YS1hY3RpdmUtaXRlbV06bm90KCBbZGF0YS1mb2N1cy12aXNpYmxlXSApOm5vdChcblx0XHRcdFthcmlhLWRpc2FibGVkPSd0cnVlJ11cblx0XHQpIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMudGhlbWUuYWNjZW50IH07XG5cdFx0Y29sb3I6ICR7IENPTE9SUy53aGl0ZSB9O1xuXHR9XG5cblx0LyogS2V5Ym9hcmQgZm9jdXMgKGZvY3VzLXZpc2libGUpICovXG5cdCZbZGF0YS1mb2N1cy12aXNpYmxlXSB7XG5cdFx0Ym94LXNoYWRvdzogMCAwIDAgMS41cHggdmFyKCAtLXdwLWFkbWluLXRoZW1lLWNvbG9yICk7XG5cblx0XHQvKiBPbmx5IHZpc2libGUgaW4gV2luZG93cyBIaWdoIENvbnRyYXN0IG1vZGUgKi9cblx0XHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdH1cblxuXHQvKiBBY3RpdmUgKGllLiBwcmVzc2VkLCBtb3VzZSBkb3duKSAqL1xuXHQmOmFjdGl2ZSxcblx0JltkYXRhLWFjdGl2ZV0ge1xuXHRcdC8qIFRPRE86IHNob3VsZCB0aGVyZSBiZSBhIHZpc3VhbCBhY3RpdmUgc3RhdGU/ICovXG5cdH1cblxuXHQvKiBXaGVuIHRoZSBpdGVtIGlzIHRoZSB0cmlnZ2VyIG9mIGFuIG9wZW4gc3VibWVudSAqL1xuXHQkeyBEcm9wZG93bk1lbnUgfTpub3QoOmZvY3VzKSAmOm5vdCg6Zm9jdXMpW2FyaWEtZXhwYW5kZWQ9XCJ0cnVlXCJdIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgMTAwIF0gfTtcblx0XHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbIDkwMCBdIH07XG5cdH1cblxuXHRzdmcge1xuXHRcdGZpbGw6IGN1cnJlbnRDb2xvcjtcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW0gPSBzdHlsZWQoIEFyaWFraXQuTWVudUl0ZW0gKWBcblx0JHsgYmFzZUl0ZW0gfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVDaGVja2JveEl0ZW0gPSBzdHlsZWQoIEFyaWFraXQuTWVudUl0ZW1DaGVja2JveCApYFxuXHQkeyBiYXNlSXRlbSB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudVJhZGlvSXRlbSA9IHN0eWxlZCggQXJpYWtpdC5NZW51SXRlbVJhZGlvIClgXG5cdCR7IGJhc2VJdGVtIH07XG5gO1xuXG5leHBvcnQgY29uc3QgSXRlbVByZWZpeFdyYXBwZXIgPSBzdHlsZWQuc3BhbmBcblx0LyogQWx3YXlzIG9jY3VweSB0aGUgZmlyc3QgY29sdW1uLCBldmVuIHdoZW4gYXV0by1jb2xsYXBzaW5nICovXG5cdGdyaWQtY29sdW1uOiAxO1xuXG5cdC8qXG5cdCAqIEV2ZW4gd2hlbiB0aGUgaXRlbSBpcyBub3QgY2hlY2tlZCwgb2NjdXB5IHRoZSBzYW1lIHNjcmVlbiBzcGFjZSB0byBhdm9pZFxuXHQgKiB0aGUgc3BhY2UgY29sbGFwc2lkZSB3aGVuIG5vIGl0ZW1zIGFyZSBjaGVja2VkLlxuXHQgKi9cblx0JHsgRHJvcGRvd25NZW51Q2hlY2tib3hJdGVtIH0gPiAmLFxuXHQkeyBEcm9wZG93bk1lbnVSYWRpb0l0ZW0gfSA+ICYge1xuXHRcdC8qIFNhbWUgd2lkdGggYXMgdGhlIGNoZWNrIGljb25zICovXG5cdFx0bWluLXdpZHRoOiAkeyBzcGFjZSggNiApIH07XG5cdH1cblxuXHQkeyBEcm9wZG93bk1lbnVDaGVja2JveEl0ZW0gfSA+ICYsXG5cdCR7IERyb3Bkb3duTWVudVJhZGlvSXRlbSB9ID4gJixcblx0Jjpub3QoIDplbXB0eSApIHtcblx0XHRtYXJnaW4taW5saW5lLWVuZDogJHsgc3BhY2UoIDIgKSB9O1xuXHR9XG5cblx0ZGlzcGxheTogZmxleDtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyAnNzAwJyBdIH07XG5cblx0Lypcblx0KiBXaGVuIHRoZSBwYXJlbnQgbWVudSBpdGVtIGlzIGFjdGl2ZSwgZXhjZXB0IHdoZW4gaXQncyBhIG5vbi1mb2N1c2VkL2hvdmVyZWRcblx0KiBzdWJtZW51IHRyaWdnZXIgKGluIHRoYXQgY2FzZSwgY29sb3Igc2hvdWxkIG5vdCBiZSBpbmhlcml0ZWQpXG5cdCovXG5cdFtkYXRhLWFjdGl2ZS1pdGVtXTpub3QoIFtkYXRhLWZvY3VzLXZpc2libGVdICkgPiAmLFxuXHQvKiBXaGVuIHRoZSBwYXJlbnQgbWVudSBpdGVtIGlzIGRpc2FibGVkICovXG5cdFthcmlhLWRpc2FibGVkPSd0cnVlJ10gPiAmIHtcblx0XHRjb2xvcjogaW5oZXJpdDtcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW1Db250ZW50V3JhcHBlciA9IHN0eWxlZC5kaXZgXG5cdC8qXG5cdCAqIEFsd2F5cyBvY2N1cHkgdGhlIHNlY29uZCBjb2x1bW4sIHNpbmNlIHRoZSBmaXJzdCBjb2x1bW5cblx0ICogaXMgdGFrZW4gYnkgdGhlIHByZWZpeCB3cmFwcGVyICh3aGVuIGRpc3BsYXllZCkuXG5cdCAqL1xuXHRncmlkLWNvbHVtbjogMjtcblxuXHRkaXNwbGF5OiBmbGV4O1xuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cdGdhcDogJHsgc3BhY2UoIDMgKSB9O1xuXG5cdHBvaW50ZXItZXZlbnRzOiBub25lO1xuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW1DaGlsZHJlbldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuXHRmbGV4OiAxO1xuXG5cdGRpc3BsYXk6IGlubGluZS1mbGV4O1xuXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRnYXA6ICR7IHNwYWNlKCAxICkgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBJdGVtU3VmZml4V3JhcHBlciA9IHN0eWxlZC5zcGFuYFxuXHRmbGV4OiAwIDEgZml0LWNvbnRlbnQ7XG5cdG1pbi13aWR0aDogMDtcblx0d2lkdGg6IGZpdC1jb250ZW50O1xuXG5cdGRpc3BsYXk6IGZsZXg7XG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRnYXA6ICR7IHNwYWNlKCAzICkgfTtcblxuXHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbICc3MDAnIF0gfTtcblxuXHQvKlxuXHQgKiBXaGVuIHRoZSBwYXJlbnQgbWVudSBpdGVtIGlzIGFjdGl2ZSwgZXhjZXB0IHdoZW4gaXQncyBhIG5vbi1mb2N1c2VkL2hvdmVyZWRcblx0ICogc3VibWVudSB0cmlnZ2VyIChpbiB0aGF0IGNhc2UsIGNvbG9yIHNob3VsZCBub3QgYmUgaW5oZXJpdGVkKVxuXHQgKi9cblx0W2RhdGEtYWN0aXZlLWl0ZW1dOm5vdCggW2RhdGEtZm9jdXMtdmlzaWJsZV0gKSAqOm5vdCgkeyBEcm9wZG93bk1lbnUgfSkgJixcblx0LyogV2hlbiB0aGUgcGFyZW50IG1lbnUgaXRlbSBpcyBkaXNhYmxlZCAqL1xuXHRbYXJpYS1kaXNhYmxlZD0ndHJ1ZSddICo6bm90KCR7IERyb3Bkb3duTWVudSB9KSAmIHtcblx0XHRjb2xvcjogaW5oZXJpdDtcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUdyb3VwID0gc3R5bGVkKCBBcmlha2l0Lk1lbnVHcm91cCApYFxuXHQvKiBJZ25vcmUgdGhpcyBlbGVtZW50IHdoZW4gY2FsY3VsYXRpbmcgdGhlIGxheW91dC4gVXNlZnVsIGZvciBzdWJncmlkICovXG5cdGRpc3BsYXk6IGNvbnRlbnRzO1xuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudVNlcGFyYXRvciA9IHN0eWxlZCggQXJpYWtpdC5NZW51U2VwYXJhdG9yICk8XG5cdFBpY2s8IERyb3Bkb3duTWVudUNvbnRleHQsICd2YXJpYW50JyA+XG4+YFxuXHQvKiBPY2N1cHkgdGhlIHdpZHRoIG9mIGFsbCBncmlkIGNvbHVtbnMgKGllLiBmdWxsIHdpZHRoKSAqL1xuXHRncmlkLWNvbHVtbjogMSAvIC0xO1xuXG5cdGJvcmRlcjogbm9uZTtcblx0aGVpZ2h0OiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfTtcblx0YmFja2dyb3VuZC1jb2xvcjogJHsgKCBwcm9wcyApID0+XG5cdFx0cHJvcHMudmFyaWFudCA9PT0gJ3Rvb2xiYXInXG5cdFx0XHQ/IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1Jcblx0XHRcdDogRElWSURFUl9DT0xPUiB9O1xuXHQvKiBBbGlnbiB3aXRoIG1lbnUgaXRlbXMnIGNvbnRlbnQgKi9cblx0bWFyZ2luLWJsb2NrOiAkeyBzcGFjZSggMiApIH07XG5cdG1hcmdpbi1pbmxpbmU6ICR7IElURU1fUEFERElOR19JTkxJTkUgfTtcblxuXHQvKiBPbmx5IHZpc2libGUgaW4gV2luZG93cyBIaWdoIENvbnRyYXN0IG1vZGUgKi9cblx0b3V0bGluZTogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuYDtcblxuZXhwb3J0IGNvbnN0IFN1Ym1lbnVDaGV2cm9uSWNvbiA9IHN0eWxlZCggSWNvbiApYFxuXHR3aWR0aDogJHsgc3BhY2UoIDEuNSApIH07XG5cdCR7IHJ0bChcblx0XHR7XG5cdFx0XHR0cmFuc2Zvcm06IGBzY2FsZVgoMSlgLFxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0dHJhbnNmb3JtOiBgc2NhbGVYKC0xKWAsXG5cdFx0fVxuXHQpIH07XG5gO1xuXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51SXRlbUxhYmVsID0gc3R5bGVkKCBUcnVuY2F0ZSApYFxuXHRmb250LXNpemU6ICR7IGZvbnQoICdkZWZhdWx0LmZvbnRTaXplJyApIH07XG5cdGxpbmUtaGVpZ2h0OiAyMHB4O1xuXHRjb2xvcjogaW5oZXJpdDtcbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVJdGVtSGVscFRleHQgPSBzdHlsZWQoIFRydW5jYXRlIClgXG5cdGZvbnQtc2l6ZTogJHsgZm9udCggJ2hlbHBUZXh0LmZvbnRTaXplJyApIH07XG5cdGxpbmUtaGVpZ2h0OiAxNnB4O1xuXHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbICc3MDAnIF0gfTtcblxuXHRbZGF0YS1hY3RpdmUtaXRlbV06bm90KCBbZGF0YS1mb2N1cy12aXNpYmxlXSApICo6bm90KCAkeyBEcm9wZG93bk1lbnUgfSApICYsXG5cdFthcmlhLWRpc2FibGVkPSd0cnVlJ10gKjpub3QoICR7IERyb3Bkb3duTWVudSB9ICkgJiB7XG5cdFx0Y29sb3I6IGluaGVyaXQ7XG5cdH1cbmA7XG4iXX0= */"));
export const DropdownMenuItemHelpText = /*#__PURE__*/_styled(Truncate, process.env.NODE_ENV === "production" ? {
  target: "e1kdzosf0"
} : {
  target: "e1kdzosf0",
  label: "DropdownMenuItemHelpText"
})("font-size:", font('helpText.fontSize'), ";line-height:16px;color:", COLORS.gray['700'], ";[data-active-item]:not( [data-focus-visible] ) *:not( ", DropdownMenu, " ) &,[aria-disabled='true'] *:not( ", DropdownMenu, " ) &{color:inherit;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
//# sourceMappingURL=styles.js.map