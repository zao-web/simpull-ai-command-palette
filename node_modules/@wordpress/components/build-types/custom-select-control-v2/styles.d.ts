/// <reference types="react" />
import * as Ariakit from '@ariakit/react';
import type { CustomSelectProps } from './types';
export declare const CustomSelectLabel: import("@emotion/styled").StyledComponent<Ariakit.SelectLabelOptions<"div"> & {
    [index: `data-${string}`]: unknown;
    wrapElement?: import("@ariakit/react-core/cjs/utils/types").WrapElement | undefined;
    children?: import("@ariakit/react-core/cjs/utils/types").Children<any>;
    render?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("@ariakit/react-core/cjs/utils/types").RenderProp<import("react").HTMLAttributes<any> & import("react").RefAttributes<any>> | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "children" | keyof Ariakit.SelectLabelOptions<"div">> & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const CustomSelectButton: import("@emotion/styled").StyledComponent<Ariakit.SelectOptions<"button"> & {
    [index: `data-${string}`]: unknown;
    wrapElement?: import("@ariakit/react-core/cjs/utils/types").WrapElement | undefined;
    children?: import("@ariakit/react-core/cjs/utils/types").Children<any>;
    render?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("@ariakit/react-core/cjs/utils/types").RenderProp<import("react").HTMLAttributes<any> & import("react").RefAttributes<any>> | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "key" | keyof import("react").ButtonHTMLAttributes<HTMLButtonElement>> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
}, "children" | keyof Ariakit.SelectOptions<"button">> & {
    theme?: import("@emotion/react").Theme | undefined;
} & {
    size: NonNullable<CustomSelectProps['size']>;
    hasCustomRenderProp: boolean;
}, {}, {}>;
export declare const CustomSelectPopover: import("@emotion/styled").StyledComponent<Ariakit.SelectPopoverOptions<"div"> & {
    [index: `data-${string}`]: unknown;
    wrapElement?: import("@ariakit/react-core/cjs/utils/types").WrapElement | undefined;
    children?: import("@ariakit/react-core/cjs/utils/types").Children<any>;
    render?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("@ariakit/react-core/cjs/utils/types").RenderProp<import("react").HTMLAttributes<any> & import("react").RefAttributes<any>> | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "children" | keyof Ariakit.SelectPopoverOptions<"div">> & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const CustomSelectItem: import("@emotion/styled").StyledComponent<Ariakit.SelectItemOptions<"div"> & {
    [index: `data-${string}`]: unknown;
    wrapElement?: import("@ariakit/react-core/cjs/utils/types").WrapElement | undefined;
    children?: import("@ariakit/react-core/cjs/utils/types").Children<any>;
    render?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("@ariakit/react-core/cjs/utils/types").RenderProp<import("react").HTMLAttributes<any> & import("react").RefAttributes<any>> | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "children" | keyof Ariakit.SelectItemOptions<"div">> & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
//# sourceMappingURL=styles.d.ts.map