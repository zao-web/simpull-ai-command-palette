{"version":3,"file":"context.js","sources":["../../../src/integrations/context.ts"],"sourcesContent":["/* eslint-disable max-lines */\n\nimport { execFile } from 'node:child_process';\nimport { readdir, readFile } from 'node:fs';\nimport * as os from 'node:os';\nimport { join } from 'node:path';\nimport { promisify } from 'node:util';\nimport type {\n  AppContext,\n  CloudResourceContext,\n  Contexts,\n  CultureContext,\n  DeviceContext,\n  Event,\n  IntegrationFn,\n  OsContext,\n} from '@sentry/core';\nimport { defineIntegration } from '@sentry/core';\n\nexport const readFileAsync = promisify(readFile);\nexport const readDirAsync = promisify(readdir);\n\n// Process enhanced with methods from Node 18, 20, 22 as @types/node\n// is on `14.18.0` to match minimum version requirements of the SDK\ninterface ProcessWithCurrentValues extends NodeJS.Process {\n  availableMemory?(): number;\n}\n\nconst INTEGRATION_NAME = 'Context';\n\ninterface DeviceContextOptions {\n  cpu?: boolean;\n  memory?: boolean;\n}\n\ninterface ContextOptions {\n  app?: boolean;\n  os?: boolean;\n  device?: DeviceContextOptions | boolean;\n  culture?: boolean;\n  cloudResource?: boolean;\n}\n\nconst _nodeContextIntegration = ((options: ContextOptions = {}) => {\n  let cachedContext: Promise<Contexts> | undefined;\n\n  const _options = {\n    app: true,\n    os: true,\n    device: true,\n    culture: true,\n    cloudResource: true,\n    ...options,\n  };\n\n  /** Add contexts to the event. Caches the context so we only look it up once. */\n  async function addContext(event: Event): Promise<Event> {\n    if (cachedContext === undefined) {\n      cachedContext = _getContexts();\n    }\n\n    const updatedContext = _updateContext(await cachedContext);\n\n    // TODO(v10): conditional with `sendDefaultPii` here?\n    event.contexts = {\n      ...event.contexts,\n      app: { ...updatedContext.app, ...event.contexts?.app },\n      os: { ...updatedContext.os, ...event.contexts?.os },\n      device: { ...updatedContext.device, ...event.contexts?.device },\n      culture: { ...updatedContext.culture, ...event.contexts?.culture },\n      cloud_resource: { ...updatedContext.cloud_resource, ...event.contexts?.cloud_resource },\n    };\n\n    return event;\n  }\n\n  /** Get the contexts from node. */\n  async function _getContexts(): Promise<Contexts> {\n    const contexts: Contexts = {};\n\n    if (_options.os) {\n      contexts.os = await getOsContext();\n    }\n\n    if (_options.app) {\n      contexts.app = getAppContext();\n    }\n\n    if (_options.device) {\n      contexts.device = getDeviceContext(_options.device);\n    }\n\n    if (_options.culture) {\n      const culture = getCultureContext();\n\n      if (culture) {\n        contexts.culture = culture;\n      }\n    }\n\n    if (_options.cloudResource) {\n      contexts.cloud_resource = getCloudResourceContext();\n    }\n\n    return contexts;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addContext(event);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Capture context about the environment and the device that the client is running on, to events.\n */\nexport const nodeContextIntegration = defineIntegration(_nodeContextIntegration);\n\n/**\n * Updates the context with dynamic values that can change\n */\nfunction _updateContext(contexts: Contexts): Contexts {\n  // Only update properties if they exist\n\n  if (contexts.app?.app_memory) {\n    contexts.app.app_memory = process.memoryUsage().rss;\n  }\n\n  if (contexts.app?.free_memory && typeof (process as ProcessWithCurrentValues).availableMemory === 'function') {\n    const freeMemory = (process as ProcessWithCurrentValues).availableMemory?.();\n    if (freeMemory != null) {\n      contexts.app.free_memory = freeMemory;\n    }\n  }\n\n  if (contexts.device?.free_memory) {\n    contexts.device.free_memory = os.freemem();\n  }\n\n  return contexts;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext(): Promise<OsContext> {\n  const platformId = os.platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: os.release(),\n      };\n  }\n}\n\nfunction getCultureContext(): CultureContext | undefined {\n  try {\n    if (typeof process.versions.icu !== 'string') {\n      // Node was built without ICU support\n      return;\n    }\n\n    // Check that node was built with full Intl support. Its possible it was built without support for non-English\n    // locales which will make resolvedOptions inaccurate\n    //\n    // https://nodejs.org/api/intl.html#detecting-internationalization-support\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat('es', { month: 'long' });\n    if (spanish.format(january) === 'enero') {\n      const options = Intl.DateTimeFormat().resolvedOptions();\n\n      return {\n        locale: options.locale,\n        timezone: options.timeZone,\n      };\n    }\n  } catch {\n    //\n  }\n\n  return;\n}\n\n/**\n * Get app context information from process\n */\nexport function getAppContext(): AppContext {\n  const app_memory = process.memoryUsage().rss;\n  const app_start_time = new Date(Date.now() - process.uptime() * 1000).toISOString();\n  // https://nodejs.org/api/process.html#processavailablememory\n  const appContext: AppContext = { app_start_time, app_memory };\n\n  if (typeof (process as ProcessWithCurrentValues).availableMemory === 'function') {\n    const freeMemory = (process as ProcessWithCurrentValues).availableMemory?.();\n    if (freeMemory != null) {\n      appContext.free_memory = freeMemory;\n    }\n  }\n\n  return appContext;\n}\n\n/**\n * Gets device information from os\n */\nexport function getDeviceContext(deviceOpt: DeviceContextOptions | true): DeviceContext {\n  const device: DeviceContext = {};\n\n  // Sometimes os.uptime() throws due to lacking permissions: https://github.com/getsentry/sentry-javascript/issues/8202\n  let uptime;\n  try {\n    uptime = os.uptime();\n  } catch {\n    // noop\n  }\n\n  // os.uptime or its return value seem to be undefined in certain environments (e.g. Azure functions).\n  // Hence, we only set boot time, if we get a valid uptime value.\n  // @see https://github.com/getsentry/sentry-javascript/issues/5856\n  if (typeof uptime === 'number') {\n    device.boot_time = new Date(Date.now() - uptime * 1000).toISOString();\n  }\n\n  device.arch = os.arch();\n\n  if (deviceOpt === true || deviceOpt.memory) {\n    device.memory_size = os.totalmem();\n    device.free_memory = os.freemem();\n  }\n\n  if (deviceOpt === true || deviceOpt.cpu) {\n    const cpuInfo = os.cpus() as os.CpuInfo[] | undefined;\n    const firstCpu = cpuInfo?.[0];\n    if (firstCpu) {\n      device.processor_count = cpuInfo.length;\n      device.cpu_description = firstCpu.model;\n      device.processor_frequency = firstCpu.speed;\n    }\n  }\n\n  return device;\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES: { [platform: string]: string } = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows',\n};\n\n/** Linux version file to check for a distribution. */\ninterface DistroFile {\n  /** The file name, located in `/etc`. */\n  name: string;\n  /** Potential distributions to check. */\n  distros: [string, ...string[]];\n}\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS: DistroFile[] = [\n  { name: 'fedora-release', distros: ['Fedora'] },\n  { name: 'redhat-release', distros: ['Red Hat Linux', 'Centos'] },\n  { name: 'redhat_version', distros: ['Red Hat Linux'] },\n  { name: 'SuSE-release', distros: ['SUSE Linux'] },\n  { name: 'lsb-release', distros: ['Ubuntu Linux', 'Arch Linux'] },\n  { name: 'debian_version', distros: ['Debian'] },\n  { name: 'debian_release', distros: ['Debian'] },\n  { name: 'arch-release', distros: ['Arch Linux'] },\n  { name: 'gentoo-release', distros: ['Gentoo Linux'] },\n  { name: 'novell-release', distros: ['SUSE Linux'] },\n  { name: 'alpine-release', distros: ['Alpine Linux'] },\n];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS: {\n  [identifier: string]: (content: string) => string | undefined;\n} = {\n  alpine: content => content,\n  arch: content => matchFirst(/distrib_release=(.*)/, content),\n  centos: content => matchFirst(/release ([^ ]+)/, content),\n  debian: content => content,\n  fedora: content => matchFirst(/release (..)/, content),\n  mint: content => matchFirst(/distrib_release=(.*)/, content),\n  red: content => matchFirst(/release ([^ ]+)/, content),\n  suse: content => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: content => matchFirst(/distrib_release=(.*)/, content),\n};\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex: RegExp, text: string): string | undefined {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo(): Promise<OsContext> {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo: OsContext = {\n    kernel_version: os.release(),\n    name: 'Mac OS X',\n    version: `10.${Number(os.release().split('.')[0]) - 4}`,\n  };\n\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n\n    const output = await new Promise<string>((resolve, reject) => {\n      execFile('/usr/bin/sw_vers', (error: Error | null, stdout: string) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(stdout);\n      });\n    });\n\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch {\n    // ignore\n  }\n\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name: string): string {\n  return (name.split(' ') as [string])[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo(): Promise<OsContext> {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo: OsContext = {\n    kernel_version: os.release(),\n    name: 'Linux',\n  };\n\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readDirAsync('/etc');\n    const distroFile = LINUX_DISTROS.find(file => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = join('/etc', distroFile.name);\n    const contents = ((await readFileAsync(distroPath, { encoding: 'utf-8' })) as string).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const { distros } = distroFile;\n    linuxInfo.name = distros.find(d => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = LINUX_VERSIONS[id]?.(contents);\n  } catch {\n    // ignore\n  }\n\n  return linuxInfo;\n}\n\n/**\n * Grabs some information about hosting provider based on best effort.\n */\nfunction getCloudResourceContext(): CloudResourceContext | undefined {\n  if (process.env.VERCEL) {\n    // https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables\n    return {\n      'cloud.provider': 'vercel',\n      'cloud.region': process.env.VERCEL_REGION,\n    };\n  } else if (process.env.AWS_REGION) {\n    // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\n    return {\n      'cloud.provider': 'aws',\n      'cloud.region': process.env.AWS_REGION,\n      'cloud.platform': process.env.AWS_EXECUTION_ENV,\n    };\n  } else if (process.env.GCP_PROJECT) {\n    // https://cloud.google.com/composer/docs/how-to/managing/environment-variables#reserved_variables\n    return {\n      'cloud.provider': 'gcp',\n    };\n  } else if (process.env.ALIYUN_REGION_ID) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'alibaba_cloud',\n      'cloud.region': process.env.ALIYUN_REGION_ID,\n    };\n  } else if (process.env.WEBSITE_SITE_NAME && process.env.REGION_NAME) {\n    // https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#app-environment\n    return {\n      'cloud.provider': 'azure',\n      'cloud.region': process.env.REGION_NAME,\n    };\n  } else if (process.env.IBM_CLOUD_REGION) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'ibm_cloud',\n      'cloud.region': process.env.IBM_CLOUD_REGION,\n    };\n  } else if (process.env.TENCENTCLOUD_REGION) {\n    // https://www.tencentcloud.com/document/product/583/32748\n    return {\n      'cloud.provider': 'tencent_cloud',\n      'cloud.region': process.env.TENCENTCLOUD_REGION,\n      'cloud.account.id': process.env.TENCENTCLOUD_APPID,\n      'cloud.availability_zone': process.env.TENCENTCLOUD_ZONE,\n    };\n  } else if (process.env.NETLIFY) {\n    // https://docs.netlify.com/configure-builds/environment-variables/#read-only-variables\n    return {\n      'cloud.provider': 'netlify',\n    };\n  } else if (process.env.FLY_REGION) {\n    // https://fly.io/docs/reference/runtime-environment/\n    return {\n      'cloud.provider': 'fly.io',\n      'cloud.region': process.env.FLY_REGION,\n    };\n  } else if (process.env.DYNO) {\n    // https://devcenter.heroku.com/articles/dynos#local-environment-variables\n    return {\n      'cloud.provider': 'heroku',\n    };\n  } else {\n    return undefined;\n  }\n}\n"],"names":["promisify","readFile","readdir","defineIntegration","execFile","join"],"mappings":"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"}