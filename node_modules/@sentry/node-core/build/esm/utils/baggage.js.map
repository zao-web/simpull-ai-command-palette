{"version":3,"file":"baggage.js","sources":["../../../src/utils/baggage.ts"],"sourcesContent":["import { objectToBaggageHeader, parseBaggageHeader } from '@sentry/core';\n\n/**\n * Merge two baggage headers into one, where the existing one takes precedence.\n * The order of the existing baggage will be preserved, and new entries will be added to the end.\n */\nexport function mergeBaggageHeaders<Existing extends string | string[] | number | undefined>(\n  existing: Existing,\n  baggage: string,\n): string | undefined | Existing {\n  if (!existing) {\n    return baggage;\n  }\n\n  const existingBaggageEntries = parseBaggageHeader(existing);\n  const newBaggageEntries = parseBaggageHeader(baggage);\n\n  if (!newBaggageEntries) {\n    return existing;\n  }\n\n  // Existing entries take precedence, ensuring order remains stable for minimal changes\n  const mergedBaggageEntries = { ...existingBaggageEntries };\n  Object.entries(newBaggageEntries).forEach(([key, value]) => {\n    if (!mergedBaggageEntries[key]) {\n      mergedBaggageEntries[key] = value;\n    }\n  });\n\n  return objectToBaggageHeader(mergedBaggageEntries);\n}\n"],"names":[],"mappings":";;AAEA;AACA;AACA;AACA;AACO,SAAS,mBAAmB;AACnC,EAAE,QAAQ;AACV,EAAE,OAAO;AACT,EAAiC;AACjC,EAAE,IAAI,CAAC,QAAQ,EAAE;AACjB,IAAI,OAAO,OAAO;AAClB;;AAEA,EAAE,MAAM,sBAAA,GAAyB,kBAAkB,CAAC,QAAQ,CAAC;AAC7D,EAAE,MAAM,iBAAA,GAAoB,kBAAkB,CAAC,OAAO,CAAC;;AAEvD,EAAE,IAAI,CAAC,iBAAiB,EAAE;AAC1B,IAAI,OAAO,QAAQ;AACnB;;AAEA;AACA,EAAE,MAAM,oBAAA,GAAuB,EAAE,GAAG,wBAAwB;AAC5D,EAAE,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK;AAC9D,IAAI,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,EAAE;AACpC,MAAM,oBAAoB,CAAC,GAAG,CAAA,GAAI,KAAK;AACvC;AACA,GAAG,CAAC;;AAEJ,EAAE,OAAO,qBAAqB,CAAC,oBAAoB,CAAC;AACpD;;;;"}